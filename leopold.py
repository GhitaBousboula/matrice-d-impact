import streamlit as st
import pandas as pd

st.set_page_config(page_title="Matrice de Leopold", layout="wide")

st.title("üìä Matrice de Leopold avec intensit√©, √©tendue, dur√©e et nature")
st.write("S√©lectionnez les param√®tres pour chaque action et composante, et obtenez une matrice textuelle color√©e bas√©e sur l'importance et la nature de l'impact.")

# Actions du projet (colonnes)
actions = st.multiselect(
    "Actions du projet", 
    ["Installation de chantier", "Terrassement", "D√©p√¥t de mat√©riaux", "Utilisation de machinerie", "Travaux de construction"],
    default=["Installation de chantier", "Terrassement"]
)

# Composantes environnementales (lignes)
composantes = st.multiselect(
    "Composantes environnementales", 
    ["Sol", "Eau", "Air", "Topographie", "Ressources g√©ologiques", "Bruit", "Faune", "Flore", "Paysage", "Exploitations agricoles", "S√©curit√© humaine", "Infrastructures existantes", "D√©chets", "Eaux us√©es", "Circulation routi√®re"],
    default=["Sol", "Eau", "Faune"]
)

# Table de correspondance simul√©e (simplifi√©e)
def evaluer_importance(intensite, etendue, duree):
    table = {
        ("tr√®s forte", "r√©gionale", "long terme"): "Tr√®s forte",
        ("tr√®s forte", "r√©gionale", "moyen terme"): "Tr√®s forte",
        ("tr√®s forte", "r√©gionale", "court terme"): "Forte",
        ("tr√®s forte", "locale", "long terme"): "Forte",
        ("tr√®s forte", "locale", "moyen terme"): "Moyenne",
        ("tr√®s forte", "locale", "court terme"): "Moyenne",
        ("tr√®s forte", "ponctuelle", "long terme"): "Moyenne",
        ("tr√®s forte", "ponctuelle", "moyen terme"): "Faible",
        ("tr√®s forte", "ponctuelle", "court terme"): "Faible",
        ("forte", "r√©gionale", "long terme"): "Tr√®s forte",
        ("forte", "r√©gionale", "moyen terme"): "Forte",
        ("forte", "r√©gionale", "court terme"): "Moyenne",
        ("forte", "locale", "long terme"): "Forte",
        ("forte", "locale", "moyen terme"): "Moyenne",
        ("forte", "locale", "court terme"): "Faible",
        ("forte", "ponctuelle", "long terme"): "Moyenne",
        ("forte", "ponctuelle", "moyen terme"): "Faible",
        ("forte", "ponctuelle", "court terme"): "Tr√®s faible",
        ("moyenne", "r√©gionale", "long terme"): "Forte",
        ("moyenne", "r√©gionale", "moyen terme"): "Moyenne",
        ("moyenne", "r√©gionale", "court terme"): "Faible",
        ("moyenne", "locale", "long terme"): "Moyenne",
        ("moyenne", "locale", "moyen terme"): "Faible",
        ("moyenne", "locale", "court terme"): "Tr√®s faible",
        ("moyenne", "ponctuelle", "long terme"): "Faible",
        ("moyenne", "ponctuelle", "moyen terme"): "Faible",
        ("moyenne", "ponctuelle", "court terme"): "Faibe",
        ("faible", "r√©gionale", "long terme"): "Moyenne",
        ("faible", "r√©gionale", "moyen terme"): "Moyenne",
        ("faible", "r√©gionale", "court terme"): "Faible",
        ("faible", "locale", "long terme"): "Moyenne",
        ("faible", "locale", "moyen terme"): "Faible",
        ("faible", "locale", "court terme"): "Faible",
        ("faible", "ponctuelle", "long terme"): "Faible",
        ("faible", "ponctuelle", "moyen terme"): "Tr√®s faible",
        ("faible", "ponctuelle", "court terme"): "Tr√®s faible",
    }
    cle = (intensite.lower(), etendue.lower(), duree.lower())
    return table.get(cle, "Faible")

# Couleurs combin√©es nature + importance
def get_color_class(val, nature):
    if nature == "neutre":
        return 'background-color: white; color: black;'
    if nature == "n√©gatif":
        colors = {
            "Tr√®s forte": "#8B0000",  # Rouge fonc√©
            "Forte": "#FF4500",      # Orange fonc√©
            "Moyenne": "#FFA500",    # Orange
            "Faible": "#FFFF66",     # Jaune clair
            "Tr√®s faible": "#F0E68C"   # Jaune p√¢le
        }
    else:
        colors = {
            "Tr√®s forte": "#006400",   # Vert fonc√©
            "Forte": "#228B22",       # Vert moyen
            "Moyenne": "#7CFC00",     # Vert vif
            "Faible": "#ADFF2F",      # Vert clair
            "Tr√®s faible": "#E0FFE0"    # Vert tr√®s p√¢le
        }
    color = colors.get(val, "#FFFFFF")
    text_color = "black"
    return f'background-color: {color}; color: {text_color};'

# Collecte des r√©sultats
resultats = []
if actions and composantes:
    for composante in composantes:
        st.subheader(f"‚öôÔ∏è {composante}")
        for action in actions:
            with st.expander(f"Action : {action}"):
                nature = st.selectbox("Nature de l‚Äôimpact", ["n√©gatif", "positif", "neutre"], key=f"nature-{action}-{composante}")

                if nature != "neutre":
                    intensite = st.selectbox("Intensit√©", ["tr√®s forte", "forte", "moyenne", "faible"], key=f"intensite-{action}-{composante}")
                    etendue = st.selectbox("√âtendue", ["r√©gionale", "locale", "ponctuelle"], key=f"etendue-{action}-{composante}")
                    duree = st.selectbox("Dur√©e", ["long terme", "moyen terme", "court terme"], key=f"duree-{action}-{composante}")
                    importance = evaluer_importance(intensite, etendue, duree)
                else:
                    importance = "Neutre"

                resultats.append({"Composante": composante, "Action": action, "Importance": importance, "Nature": nature})

    # Cr√©ation de la matrice enrichie
    df = pd.DataFrame(resultats)
    pivot = df.pivot(index="Composante", columns="Action", values="Importance").fillna("")
    nature_dict = df.pivot(index="Composante", columns="Action", values="Nature").fillna("")

    html = """
    <style>
    .leopold-table {border-collapse: collapse; width: 100%; margin-bottom: 20px;}
    .leopold-table th, .leopold-table td {border: 1px solid #ddd; padding: 8px; text-align: center;}
    .leopold-table th.vertical {height: 140px; white-space: nowrap; position: relative; padding: 0;}
    .leopold-table th.vertical > div {transform: rotate(-90deg); position: absolute; left: 0; right: 0; bottom: 0; top: 0; margin: auto; height: 20px; width: 100%; transform-origin: center center;}
    </style>
    <table class="leopold-table">
        <thead><tr><th>Composantes</th>
    """
    for col in pivot.columns:
        html += f'<th class="vertical"><div>{col}</div></th>'
    html += "</tr></thead><tbody>"
    for idx in pivot.index:
        html += f'<tr><td><strong>{idx}</strong></td>'
        for col in pivot.columns:
            val = pivot.loc[idx, col]
            nature = nature_dict.loc[idx, col]
            style = get_color_class(val, nature)
            html += f'<td style="{style}">{val}</td>'
        html += '</tr>'
    html += "</tbody></table>"

    st.markdown("### üñºÔ∏è Matrice g√©n√©r√©e")
    st.markdown(html, unsafe_allow_html=True)
    



